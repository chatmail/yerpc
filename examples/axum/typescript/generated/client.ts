// AUTO-GENERATED by yerpc-derive

import * as T from "./types.js"
import * as RPC from "./jsonrpc.js"

type RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;
type NotificationMethod = (method: string, params?: RPC.Params) => void;

interface Transport {
  request: RequestMethod,
  notification: NotificationMethod
}

export class RawClient {
  constructor(private _transport: Transport) {}

  /**
   * Send a chat message.
   *
   * Pass the message to send.
   */
  public send(message: T.ChatMessage): Promise<T.Usize> {
    return (this._transport.request('send', [message] as RPC.Params)) as Promise<T.Usize>;
  }

  /**
   * List chat messages.
   */
  public list(): Promise<(T.ChatMessage)[]> {
    return (this._transport.request('list', [] as RPC.Params)) as Promise<(T.ChatMessage)[]>;
  }


}
